@page "/gallery"

@using ACSReportApp.Services.Contracts
@using ACSReportApp.Services.Models

@inject IImageService ImageService
@inject NavigationManager NavigationManager

<PageTitle>Images gallery</PageTitle>

<h2 style="text-align: center;">Images gallery</h2>

<MudPaper Elevation="0" Class="d-flex justify-center flex-grow-1 gap-4 pa-4">
    <MudTextField @bind-Value="ImageType" Label="Image type" Variant="Variant.Text"></MudTextField>
    <MudTextField @bind-Value="ImageTag" Label="Image tag" Variant="Variant.Text"></MudTextField>
    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile" Accept=".jpg,.jpeg">
        <ActivatorContent>
            <MudFab Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.Image"
                    Label="Upload picture" />
        </ActivatorContent>
    </MudFileUpload>
</MudPaper>

<MudPaper Class="d-flex flex-wrap gap-4 overflow-auto" Elevation="0">
    @if (Elements.Count() == 0)
    {
        <MudText Typo="Typo.h6">No images found</MudText>
    }
    else
    {        
        @foreach (var image in Elements)
        {
                <ImagesCard Image="@image" />
        }   
    }
</MudPaper>


@code {
    private string ImageType { get; set; }
    private string ImageTag { get; set; }

    private IList<IBrowserFile> _files = new List<IBrowserFile>();

    private IEnumerable<ImageServiceModel> Elements = new List<ImageServiceModel>();

    private async void UploadFile(IBrowserFile file)
    {
        _files.Add(file);

        await ImageService.UploadImageAsync(file, ImageType, ImageTag);
        await ReloadDataAsync();
        ImageType = string.Empty;
        ImageTag = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadDataAsync();
    }

    private async Task ReloadDataAsync()
    {
        Elements = await ImageService.GetAllImagesAsync();
        StateHasChanged();
    }
}
