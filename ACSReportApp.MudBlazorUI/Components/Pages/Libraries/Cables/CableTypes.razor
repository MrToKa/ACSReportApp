@page "/cabletypes"

@using ACSReportApp.MudBlazorUI.Components.Dialogs.CableTypes
@using ACSReportApp.MudBlazorUI.Components.Dialogs
@using ACSReportApp.Services.Contracts
@using ACSReportApp.Services.Models
@using ACSReportApp.MudBlazorUI.Components.TablesContent.Cables

@inject ICableTypeService CableTypeService
@inject IDialogService DialogService

<PageTitle>Cable Types Library</PageTitle>

<h2 style="text-align: center;">Cable Types Library</h2>

<MudPaper Elevation="0" Class="pa-4">
    @if (Elements == null || Elements.Count == 0)
    {
        <MudAlert Severity="Severity.Info">No cables found.</MudAlert>
    }
    else
    {
        <MudDataGrid T="CableTypeServiceModel" @ref="grid" Items="@Elements" ReadOnly=false
                     Bordered="true" Outlined="true" Dense="true" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterMenu"
                     Virtualize="true" FixedHeader="true" DragDropColumnReordering="true" ColumnResizeMode="ResizeMode.Container" Hideable="true">
            <Columns>

                <CableColumns />

                <TemplateColumn Title="Actions" CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudTooltip Text="Edit">
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => OpenDialogAsync(context.Item.Id))" />
                        </MudTooltip>
                        <MudTooltip Text="Delete">
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteCableTypeAsync(context.Item.Id))" />
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="CableTypeServiceModel" />
            </PagerContent>
        </MudDataGrid>

    }
</MudPaper>

<MudPaper Class="d-flex justify-center gap-4 pa-4">
    <MudItem>
        <MudButton OnClick="@(() => HideColumnsAsync(false))" Variant="Variant.Filled" Color="Color.Primary">Show All Columns</MudButton>
        <MudButton OnClick="@(() => HideColumnsAsync(true))" Variant="Variant.Filled" Color="Color.Primary">Hide Secondary Columns</MudButton>
    </MudItem>
    <MudItem>
        <MudButton OnClick="@(() => AddNewCableTypeAsync())" Variant="Variant.Filled" Color="Color.Primary">Add New Cable Type</MudButton>
    </MudItem>
    <MudItem>
        <MudFileUpload @ref="@_fileUpload" T="IBrowserFile" OnFilesChanged="UploadFile" Accept=".xlsx">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload">
                    Add cable types from file
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>
    </MudItem>
</MudPaper>



@code {
    private MudFileUpload<IBrowserFile> _fileUpload;

    private Task ClearAsync()
        => _fileUpload?.ClearAsync() ?? Task.CompletedTask;

    public MudDataGrid<CableTypeServiceModel> grid = new MudDataGrid<CableTypeServiceModel>();

    private List<CableTypeServiceModel> Elements = new List<CableTypeServiceModel>();


    private async Task HideColumnsAsync(bool hide)
    {
        foreach (var column in grid.RenderedColumns.Where(x => x.Hideable == true))
        {
            if (hide)
            {
                await column.HideAsync();
            }
            else
            {
                await column.ShowAsync();
            }
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadDataAsync();
    }

    private async Task ReloadDataAsync()
    {
        Elements = await CableTypeService.GetCablesTypesAsync();
        StateHasChanged();
    }

    private async Task AddNewCableTypeAsync()
    {
        DialogParameters parameters = new DialogParameters<CableTypeDialog>
            {
                { "DialogAction", "Add Cable" },
                { "CableType", new CableTypeServiceModel() }

            };

        DialogOptions options = new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                FullWidth = true
            };

        var dialogResult = await DialogService.ShowAsync<CableTypeDialog>("", parameters, options);
        var result = await dialogResult.Result;

        if (!result.Canceled)
        {
            await ReloadDataAsync();
        }
    }

    private async Task OpenDialogAsync(int id)
    {
        DialogParameters parameters = new DialogParameters<CableTypeDialog>
            {
                { "DialogAction", "Edit Cable" },
                { "CableTypeId", id },
                { "CableType", await CableTypeService.GetCableTypeAsync(id) }
            };

        DialogOptions options = new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                FullWidth = true
            };

        var dialogResult = await DialogService.ShowAsync<CableTypeDialog>("", parameters, options);
        var result = await dialogResult.Result;

        if (!result.Canceled)
        {
            await ReloadDataAsync();
        }
    }

    private async Task DeleteCableTypeAsync(int cableTypeId)
    {
        DialogParameters paremeters = new DialogParameters<DeleteDialog>
            {
                { x => x.Title , "Delete Cable Type?" },
                { x => x.Content, "Are you sure you want to delete this cable type?" },
                { x => x.Result, "Cable type was deleted!" }
            };

        var dialogResult = await DialogService.ShowAsync<DeleteDialog>("", paremeters);
        var result = await dialogResult.Result;

        if (!result.Canceled)
        {
            await CableTypeService.DeleteCableTypeAsync(cableTypeId);
            await ReloadDataAsync();
        }
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        await CableTypeService.UploadFromFileAsync(e.File);
        await ClearAsync();
        await ReloadDataAsync();
    }
}
