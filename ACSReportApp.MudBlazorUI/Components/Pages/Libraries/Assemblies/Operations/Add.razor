@page "/assemblies/add"

@using ACSReportApp.Services.Models
@using ACSReportApp.Services.Contracts
@using ACSReportApp.MudBlazorUI.Components.TablesContent.Parts
@using ACSReportApp.MudBlazorUI.Components.TablesContent.Assemblies

@inject IPartAssemblyService AssemblyService
@inject IPartService PartService
@inject NavigationManager NavigationManager

@if (isLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <PageTitle>Add Assembly</PageTitle>

    <h2 style="text-align: center;">Add Assembly</h2>

    <MudPaper Elevation="0" Class="pa-4">
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField T="string" Label="Assembly Name" Required="true" RequiredError="Assembly name is required!" @bind-Value="@Assembly.Name" />
            <MudTextField T="string" Label="Assembly Type" Required="true" RequiredError="Assembly type is required!" @bind-Value="@Assembly.PartAssemblyType" />
            <MudTextField T="string" Label="Description" Required="true" RequiredError="Assembly description is required!" @bind-Value="@Assembly.Description" />
            <MudTextField T="string" Label="Manufacturer" Required="true" RequiredError="Assembly manufacturer is required!" @bind-Value="@Assembly.Manufacturer" />
            <MudTextField T="string" Label="Remarks" @bind-Value="@Assembly.Remarks" />

            <MudPaper>
                <MudExpansionPanels>
                    <MudExpansionPanel Text="Add Parts to the Assembly" MaxHeight="1000" ExpandedChanged="OnExpandedChanged">
                        @if (Elements.Count == 0)
                        {
                            <MudAlert Severity="Severity.Info">No parts found.</MudAlert>
                        }
                        else
                        {
                            <MudDataGrid T="PartServiceModel" @ref="grid" Items="@Elements" ReadOnly=false
                                         Bordered="true" Outlined="true" Dense="true" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterMenu" Hover="true"
                                         Virtualize="true" FixedHeader="true" DragDropColumnReordering="true" ColumnResizeMode="ResizeMode.Container" Hideable="true" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" QuickFilter="@QuickFilter">

                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">@PartTypeBinder</MudText>
                                    <MudSpacer />
                                    <MudTextField @bind-Value="@SearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" Clearable="true"
                                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                </ToolBarContent>

                                <Columns>
                                    <PartsTableContent Part="@Elements.FirstOrDefault()" IsFullTable="false" />
                                    <TemplateColumn>
                                        <CellTemplate>
                                            <MudTooltip Text="Add to Assembly">
                                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Save" OnClick="@(() => AddPartToList(context.Item))" />
                                            </MudTooltip>
                                        </CellTemplate>
                                    </TemplateColumn>
                                </Columns>
                                <PagerContent>
                                    <MudDataGridPager T="PartServiceModel" />
                                </PagerContent>
                            </MudDataGrid>
                        }

                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudPaper>



            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="@(() => AddAssembly())">Create Assembly</MudButton>
        </MudForm>
    </MudPaper>

    <MudPaper>
        <h2 style="text-align: center;">Added Parts to the Assembly</h2>
    </MudPaper>

    <MudPaper>
        <AssembliesPartsTable AddedParts="@partsIdsToAdd"
                              OnPartsChanged="UpdatePartsDelegate"
                              OnAssemblyPartsChanged="HandlePartsChanged"
                              PartsAssemblyList="@partsAssemblyList" />
    </MudPaper>
}
@code {
    [Parameter]
    public EventCallback<HashSet<int>> OnPartsChanged { get; set; }

    private List<PartAssemblyPartModel> partsAssemblyList = new List<PartAssemblyPartModel>();

    private MudDataGrid<PartServiceModel> grid = new MudDataGrid<PartServiceModel>();

    private PartAssemblyModel Assembly = new PartAssemblyModel();

    private List<PartServiceModel> Elements = new List<PartServiceModel>();

    private HashSet<PartServiceModel> partsIdsToAdd = new HashSet<PartServiceModel>();

    private string PartTypeBinder;
    private string SearchString;

    private MudForm form;

    private bool success = false;

    private string[] errors = { };

    private RenderFragment _panelContent;

    private bool isLoading = false;
    private bool isRedirecting = false;

    protected override async Task OnInitializedAsync()
    {
        Elements = await PartService.GetAllPartsAsync();
    }


    private async Task AddAssembly()
    {
        try
        {
            isLoading = true; // Prevent UI updates

            var createAssemblyResult = await AssemblyService.CreatePartAssemblyAsync(Assembly);
            await AssemblyService.AddPartsToAssemblyAsync(createAssemblyResult.Id, partsAssemblyList);

            NavigationManager.NavigateTo("/assemblies", forceLoad: true);
            isRedirecting = true;
        }
        finally
        {
            if(!isRedirecting)
                isLoading = false;
                StateHasChanged();
        }
    }


    private async Task OnExpandedChanged(bool newVal)
    {
        if (newVal)
        {
            await Task.Delay(600);
        }
        else
        {
            // Reset after a while to prevent sudden collapse.
            Task.Delay(350).ContinueWith(t => _panelContent = null).CatchAndLog();
        }
    }

    private RenderFragment _bigAsyncContent = __builder =>
    {
    };

    private void AddPartToList(PartServiceModel part)
    {
        if (!partsIdsToAdd.Contains(part))
        {
            partsIdsToAdd.Add(part);
            partsAssemblyList.Add(new PartAssemblyPartModel { PartId = part.Id, Quantity = 1 });
            StateHasChanged();
            NotifyPartsChanged();
        }
    }

    private Func<PartServiceModel, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(SearchString))
            return true;

        if (x.OrderNumber.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private void NotifyPartsChanged()
    {
        OnPartsChanged.InvokeAsync();
    }

    private Func<HashSet<PartServiceModel>, Task> UpdatePartsDelegate => async (HashSet<PartServiceModel> updatedParts) =>
    {
        partsIdsToAdd = updatedParts;
        await Task.Yield();
        StateHasChanged();
    };

    private void HandlePartsChanged(List<PartAssemblyPartModel> updatedList)
    {
        partsAssemblyList = updatedList;
        StateHasChanged();
    }
}
