@using ACSReportApp.MudBlazorUI.Components.TablesContent.Parts
@using ACSReportApp.Services.Contracts
@using ACSReportApp.Services.Models

@inject IPartAssemblyService AssemblyService
@inject IPartService PartService

<MudPaper>
    <MudExpansionPanels>
        <MudExpansionPanel Text="Add Parts to the Assembly" MaxHeight="1000" ExpandedChanged="OnExpandedChanged">
            @if (Elements.Count == 0)
            {
                <MudAlert Severity="Severity.Info">No parts found.</MudAlert>
            }
            else
            {
                <MudDataGrid T="PartServiceModel" @ref="grid" Items="@Elements" ReadOnly=false
                             Bordered="true" Outlined="true" Dense="true" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterMenu" Hover="true"
                             Virtualize="true" FixedHeader="true" DragDropColumnReordering="true" ColumnResizeMode="ResizeMode.Container" Hideable="true" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" QuickFilter="@QuickFilter">

                    <ToolBarContent>
                        <MudText Typo="Typo.h6">@PartTypeBinder</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="@SearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" Clearable="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>

                    <Columns>
                        <PartsTableContent Part="@Elements.FirstOrDefault()" IsFullTable="false" />
                        <TemplateColumn Title="Actions">
                            <CellTemplate>
                                <MudTooltip Text="Add to Assembly">
                                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Save" OnClick="@(() => AddPartToAssembly(context.Item))" />
                                </MudTooltip>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="PartServiceModel" />
                    </PagerContent>
                </MudDataGrid>
            }

        </MudExpansionPanel>
    </MudExpansionPanels>
</MudPaper>

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public List<PartServiceModel> Elements { get; set; }

    [Parameter]
    public List<PartServiceModel> Parts { get; set; } = new List<PartServiceModel>();

    [Parameter]
    public EventCallback<List<PartServiceModel>> OnAssemblyPartsChanged { get; set; }

    private MudDataGrid<PartServiceModel> grid = new MudDataGrid<PartServiceModel>();

    private RenderFragment _panelContent;

    private string PartTypeBinder;
    private string SearchString;

    private async Task OnExpandedChanged(bool newVal)
    {
        if (newVal)
        {
            await Task.Delay(600);
        }
        else
        {
            // Reset after a while to prevent sudden collapse.
            Task.Delay(350).ContinueWith(t => _panelContent = null).CatchAndLog();
        }
    }

    private Func<PartServiceModel, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(SearchString))
            return true;

        if (x.OrderNumber.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task AddPartToAssembly(PartServiceModel part)
    {
        if(Parts.Any(x => x.Id == part.Id))
        {
            return;
        }

        var partAssemblyPart = new PartAssemblyPartModel
            {
                PartId = part.Id,
                Quantity = 1
            };
        await AssemblyService.AddPartToAssemblyAsync(Id, partAssemblyPart);

        part.Quantity = 1;
        Parts.Add(part);

        await NotifyParent();
    }

    private async Task NotifyParent()
    {
        if (OnAssemblyPartsChanged.HasDelegate)
        {
            await OnAssemblyPartsChanged.InvokeAsync(Parts);
        }
    }
}