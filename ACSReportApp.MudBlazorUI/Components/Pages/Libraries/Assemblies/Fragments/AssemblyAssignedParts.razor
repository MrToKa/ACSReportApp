@using ACSReportApp.MudBlazorUI.Components.Dialogs
@using ACSReportApp.Services.Models
@using ACSReportApp.Services.Contracts
@using ACSReportApp.MudBlazorUI.Components.TablesContent.Parts
@using ACSReportApp.MudBlazorUI.Components.TablesContent.Assemblies

@inject IPartAssemblyService AssemblyService
@inject IPartAssemblyPartService AssemblyPartService
@inject IPartService PartService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@if (Parts.Count == 0)
{
    <MudAlert Severity="Severity.Info">No parts found.</MudAlert>
}
else
{
    <MudDataGrid T="PartServiceModel" @ref="grid" Items="@Parts" ReadOnly=false
                 Bordered="true" Outlined="true" Dense="true" Hover="true"
                 Virtualize="true" FixedHeader="true" EditMode="DataGridEditMode.Cell" EditTrigger="DataGridEditTrigger.OnRowClick" CommittedItemChanges="@ItemHasBeenCommitted">

        <Columns>
            <AssemblyPartsColumns IsFullTable="IsFullTable" />
            <TemplateColumn Title="Actions" CellClass="d-flex justify-end" Editable="false" Hidden="!IsFullTable">
                <CellTemplate>
                    <MudTooltip Text="Delete">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => RemovePartFromAssembly(context.Item.Id))" />
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="PartServiceModel" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    [Parameter]
    public List<PartServiceModel> Parts { get; set; } = new List<PartServiceModel>();

    [Parameter]
    public EventCallback<List<PartServiceModel>> OnAssemblyPartsChanged { get; set; }

    [Parameter]
    public bool IsFullTable { get; set; }

    private MudDataGrid<PartServiceModel> grid = new MudDataGrid<PartServiceModel>();

    private PartServiceModel selectedItem = null;
    private PartServiceModel elementBeforeEdit;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;

    private async void ItemHasBeenCommitted(object element)
    {
        int partId = ((PartServiceModel)element).Id;
        int quantity = ((PartServiceModel)element).Quantity;
        await UpdateAddedPartQuantity(partId, quantity);
        await NotifyParent();
    }

    private async Task NotifyParent()
    {
        if (OnAssemblyPartsChanged.HasDelegate)
        {
            await OnAssemblyPartsChanged.InvokeAsync(Parts);
        }
    }

    private async Task UpdateAddedPartQuantity(int partId, int quantity)
    {
        var assemblyPart = Parts.FirstOrDefault(x => x.Id == partId);
        if (assemblyPart != null)
        {
            assemblyPart.Quantity = quantity;
        }

        await NotifyParent();
    }

    private async Task RemovePartFromAssembly(int partId)
    {
        DialogParameters parameters = new DialogParameters<DeleteDialog>
        {
            { x => x.Title , "Remove Part from Assembly?" },
            { x => x.Content, "Are you sure you want to remove this part from Assembly?" },
            { x => x.Result, "Part was removed!" }
        };

        IDialogReference dialogResult = await DialogService.ShowAsync<DeleteDialog>("", parameters);
        DialogResult result = await dialogResult.Result;

        if (!result.Canceled)
        {
            var assemblyPart = Parts.FirstOrDefault(x => x.Id == partId);
            if (assemblyPart != null)
            {
                Parts.Remove(assemblyPart);
            }

            await NotifyParent();
        }
    }
}