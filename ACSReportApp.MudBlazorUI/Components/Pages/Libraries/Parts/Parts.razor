@page "/parts"

@using ACSReportApp.MudBlazorUI.Components.Dialogs
@using ACSReportApp.Services.Contracts
@using ACSReportApp.Services.Models
@using ACSReportApp.MudBlazorUI.Components.TablesContent
@using ACSReportApp.MudBlazorUI.Components.Dialogs.Parts

@inject IPartService PartService
@inject IDialogService DialogService

<PageTitle>Parts Library</PageTitle>

<h2 style="text-align: center;">Parts Library</h2>

<MudPaper Elevation="0" Class="d-flex justify-center flex-grow-1 gap-4 pa-4">
    <MudItem Style="height:80px; width:380px;">
        <MudSelect T="string" Label="Select Part Type!" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="@(() => ReloadDataAsync())" @bind-Value="PartTypeBinder">
            @foreach (var partType in PartsTypes)
            {
                <MudSelectItem Value="@partType">@partType</MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="string" Label="Part number" @bind-Value="PartNumberValue" SearchFunc="@Search"
                         ResetValueOnEmptyText="true"
                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
    </MudItem>

</MudPaper>

<MudPaper Elevation="0" Class="pa-4">
    @if (Elements == null || Elements.Count == 0)
    {
        <MudAlert Severity="Severity.Info">Select a part type from dropdown menu!</MudAlert>
    }
    else
    {
        <MudDataGrid T="PartServiceModel" @ref="grid" Items="@Elements" ReadOnly=false
                     Bordered="true" Outlined="true" Dense="true" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterMenu"
                     Virtualize="true" FixedHeader="true" DragDropColumnReordering="true" ColumnResizeMode="ResizeMode.Container" Hideable="true">
            <Columns>
                <PartsTableContent Part="@Elements.FirstOrDefault()" />
                <TemplateColumn Title="Actions" CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudTooltip Text="Edit">
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => OpenEditDialogAsync(context.Item.Id))" />
                        </MudTooltip>
                        <MudTooltip Text="Delete">
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeletePartAsync(context.Item.Id))" />
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    }

</MudPaper>

<MudPaper Class="d-flex justify-center gap-4 pa-4">
    <MudItem>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => AddNewPart())">Add part</MudButton>
    </MudItem>
    <MudItem>
        <MudButton Color="Color.Primary" Variant="Variant.Filled">Add parts from file</MudButton>
    </MudItem>
</MudPaper>

@code {
    public MudDataGrid<PartServiceModel> grid = null;

    private List<string> PartsTypes = new List<string>();

    private List<PartServiceModel> Elements = new List<PartServiceModel>();

    private string PartNumberValue;
    private string PartTypeBinder;

    protected override async Task OnInitializedAsync()
    {
        await ReloadDataAsync();
    }

    private async Task ReloadDataAsync()
    {
        PartsTypes = await PartService.GetPartsTypesAsync();
        Elements = await PartService.GetPartsAsync(PartTypeBinder);
        StateHasChanged();
    }

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        var partsOrderNumbers = await PartService.GetPartsNumbersForSearchAsync();

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
        {
            return new string[0];
        }
        return partsOrderNumbers.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task AddNewPart()
    {
        DialogParameters parameters = new DialogParameters<PartDialog>
        {
            { "PartId", 0 },
            { "DialogTitle", "Add New Part" },
            { "SucessButton", "Add Part" },
            { "TextFieldsReadOnly", false },
            { "CRUDAction", "Add" }
        };

        var dialogResult = await DialogService.ShowAsync<PartDialog>("", parameters);
        var result = await dialogResult.Result;

        if (!result.Canceled)
        {
            await ReloadDataAsync();
        }
    }

    private async Task OpenEditDialogAsync(int id)
    {
        DialogParameters parameters = new DialogParameters<PartDialog>
        {
            { "PartId", id },
            { "DialogTitle", "Edit Part" },
            { "SucessButton", "Save Changes" },
            { "TextFieldsReadOnly", false },
            { "CRUDAction", "Edit" }
        };

        var dialogResult = await DialogService.ShowAsync<PartDialog>("", parameters);
        var result = await dialogResult.Result;

        if (!result.Canceled)
        {
            await ReloadDataAsync();
        }
    }

    private async Task DeletePartAsync(int id)
    {
        DialogParameters parameters = new DialogParameters<DeleteDialog>
        {
            { x => x.Title , "Delete Part?" },
            { x => x.Content, "Are you sure you want to delete this part?" },
            { x => x.Result, "Part was deleted!" }
        };

        IDialogReference dialogResult = await DialogService.ShowAsync<DeleteDialog>("", parameters);
        DialogResult result = await dialogResult.Result;

        if (!result.Canceled)
        {
            await PartService.DeletePartAsync(id);
            await ReloadDataAsync();
        }
    }
}
