@page "/projects"

@using System.Net.Http.Json
@using ACSReportApp.MudBlazorUI.Components.Dialogs
@using ACSReportApp.Services
@using ACSReportApp.Services.Contracts
@using ACSReportApp.Services.Models

@inject IProjectService ProjectService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<h2 style="text-align: center;">Projects</h2>

<PageTitle>Projects</PageTitle>

<MudPaper Elevation="0" Class="pa-4" >
@if (Elements == null || Elements.Count == 0)
{
    <MudAlert Severity="Severity.Info">No projects found.</MudAlert>
}
else
{
    <MudDataGrid T="ProjectServiceModel" Items="@Elements.Take(20)" ReadOnly=false
                     Bordered="true" Outlined="true" Dense="true" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterMenu"
            Virtualize="true" FixedHeader="true">
        <Columns>
            <PropertyColumn Property="x => x.Number" Title="Project number" />
            <PropertyColumn Property="x => x.Name" />
            <PropertyColumn Property="x => x.Description" />
            <PropertyColumn Property="x => x.DateCreated" Title="Date of creation" Filterable="false" />
            <TemplateColumn Title="Actions" CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudTooltip Text="Details">
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Visibility" />
                    </MudTooltip>
                    <MudTooltip Text="Edit">
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => OpenDialogAsync(context.Item.Id))" />
                    </MudTooltip>
                    <MudTooltip Text="Delete">
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteProjectAsync(context.Item.Id))" />
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}
</MudPaper>

@code {
    private List<ProjectServiceModel> Elements = new List<ProjectServiceModel>();
    private bool _isCellEditMode;
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        await ReloadDataAsync();
    }

    private async Task OpenDialogAsync(Guid id)
    {
        DialogParameters parameters = new DialogParameters<ProjectDialog>
            {
                { "ProjectId", id }
            };

        var dialogResult = await DialogService.ShowAsync<ProjectDialog>("", parameters);
        var result = await dialogResult.Result;

        if (!result.Canceled)
        {
            await ReloadDataAsync();
        }
    }

    private async Task DeleteProjectAsync(Guid projetId)
    {
        Guid.TryParse(projetId.ToString(), out Guid id);

        DialogParameters paremeters = new DialogParameters<DeleteDialog>
            {
                { x => x.Title , "Delete Project?" },
                { x => x.Content, "Are you sure you want to delete this project?" }
            };

        var dialogResult = await DialogService.ShowAsync<DeleteDialog>("", paremeters);
        var result = await dialogResult.Result;

        if (!result.Canceled)
        {
            await ProjectService.DeleteProjectAsync(id);
            await ReloadDataAsync();
        }
    }

    private async Task ReloadDataAsync()
    {
        Elements = await ProjectService.GetProjectsAsync();
        StateHasChanged();
    }
}
