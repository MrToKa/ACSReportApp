@page "/add-cable-type"

@using ACSReportApp.Services.Contracts
@using ACSReportApp.Services.Models

@inject ICableTypeService CableTypeService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Save" Class="mr-3 mb-n1" />
            Adding a new cable type!
        </MudText>
    </TitleContent>

    <DialogContent>
        <CableTypeDialogContent CableType="@CableType" OnValidSubmit="@SaveChanges" />
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="SaveChanges">@($"{DialogAction} type!")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string DialogAction { get; set; }

    [Parameter]
    public int CableTypeId { get; set; }

    [Parameter]
    public CableTypeServiceModel CableType { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private async Task SaveChanges()
    {
        try
        {
            if (DialogAction == "Add Cable")
            {
                await CableTypeService.CreateCableTypeAsync(CableType);
                Snackbar.Add("Cable type was added", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else if (DialogAction == "Edit Cable")
            {
                await CableTypeService.UpdateCableTypeAsync(CableType, CableTypeId);
                Snackbar.Add("Cable type was updated", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding cable type: {ex.Message}", Severity.Error);
        }
    }
}
