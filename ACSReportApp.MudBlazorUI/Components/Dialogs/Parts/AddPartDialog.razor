@using ACSReportApp.Services.Contracts
@using ACSReportApp.Services.Models

@inject IPartService PartService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Save" Class="mr-3 mb-n1" />
            Update part data?
        </MudText>
    </TitleContent>

    <DialogContent>
        @* <MudTextField @bind-Value="Part.PartType" Label="Part Type" ReadOnly="false" /> *@
        <MudAutocomplete T="string" Label="Part Type" @bind-Value="Part.PartType" SearchFunc="@Search"
                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
        <MudTextField @bind-Value="Part.Manufacturer" Label="Manufacturer" ReadOnly="false" />
        <MudTextField @bind-Value="Part.OrderNumber" Label="Order Number" ReadOnly="false" />
        <MudTextField @bind-Value="Part.Description" Label="Description" ReadOnly="false" />
        <MudTextField @bind-Value="Part.Width" Label="Width" ReadOnly="false" />
        <MudTextField @bind-Value="Part.Height" Label="Height" ReadOnly="false" />
        <MudTextField @bind-Value="Part.Length" Label="Length" ReadOnly="false" />
        <MudTextField @bind-Value="Part.Weight" Label="Weight" ReadOnly="false" />
        <MudTextField @bind-Value="Part.Diameter" Label="Diameter" ReadOnly="false" />
        <MudTextField @bind-Value="Part.Measurement" Label="Measurement" ReadOnly="false" />
        <MudTextField @bind-Value="Part.Remarks" Label="Remarks" ReadOnly="false" />
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="SaveChanges">Add Part</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private string PartTypeValue;
    private bool resetValueOnEmptyText;

    private PartServiceModel Part { get; set; } = new PartServiceModel();

    private void Cancel() => MudDialog.Cancel();

    private async Task SaveChanges()
    {
        try
        {
            await PartService.CreatePartAsync(Part);
            Snackbar.Add("Part was added to the database", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding part: {ex.Message}", Severity.Error);
        }
    }

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        var partsTypes = await PartService.GetPartsTypesAsync();

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
        {
            return new string[0];
        }
        return partsTypes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
