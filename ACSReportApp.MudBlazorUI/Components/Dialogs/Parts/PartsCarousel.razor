@using ACSReportApp.MudBlazorUI.Components.Pages.Libraries.Gallery
@using ACSReportApp.Services
@using ACSReportApp.Services.Contracts
@using ACSReportApp.Services.Models

@inject IImageService ImageService
@inject ISnackbar Snackbar

@if (Elements == null || Elements.Count() == 0)
{
    <MudAlert Severity="Severity.Info">No images found for this type of parts.</MudAlert>
}
else
{
    <MudCarousel Class="mud-width-full" @ref="_carousel" ItemsSource="@Elements" Style="height:400px; width:400px" ShowArrows="@(Elements.Count() > 1)" AutoCycle="false" ShowBullets="false" @bind-SelectedIndex="selectedIndex">
        <ItemTemplate>
            <div class="d-flex flex-column flex-column justify-center" style="height:100%">
                <ImagesCard Image="@context" />
            </div>
        </ItemTemplate>
    </MudCarousel>
}

<br />

<MudAutocomplete T="string" Label="Picture Type" @bind-Value="@PartTypeBinder" SearchFunc="@Search"
                 ResetValueOnEmptyText="false" CoerceValue="true" @bind-SearchText="@PartTypeBinder"
                 AdornmentColor="Color.Primary" Adornment="Adornment.None" ReadOnly="true" />

@code {
    [Parameter]
    public string PartTypeBinder { get; set; }

    [Parameter]
    public IEnumerable<ImageServiceModel> Elements { get; set; }

    [Parameter]
    public EventCallback<string> ImageTagChanged { get; set; }

    private int selectedIndex = 0;

    private MudCarousel<ImageServiceModel> _carousel = new MudCarousel<ImageServiceModel>();

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        var partsOrderNumbers = await ImageService.GetImagesTypesAsync(value);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
        {
            return new string[0];
        }
        return partsOrderNumbers.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void OnSelectedIndexChanged()
    {
        if (Elements == null || Elements.Count() == 0)
        {
            return;
        }
        ImageTagChanged.InvokeAsync(Elements.ElementAt(selectedIndex).ImageTag);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100);
        }

        OnSelectedIndexChanged();
    }
}