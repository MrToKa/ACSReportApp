@using ACSReportApp.Services.Contracts
@using ACSReportApp.Services.Models

@inject IProjectService ProjectService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Save" Class="mr-3 mb-n1" />
            Update project data?
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudTextField @bind-Value="Project.Number" Label="Project Number" ReadOnly="false" />
        <MudTextField @bind-Value="Project.Name" Label="Project Name" ReadOnly="false" />
        <MudTextField @bind-Value="Project.Description" Label="Project Description" ReadOnly="false" />
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="SaveChanges">Update project</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Guid ProjectId { get; set; }

    private ProjectServiceModel Project { get; set; } = new ProjectServiceModel();

    protected override async Task OnInitializedAsync()
    {
        await LoadProject();
    }

    private async Task LoadProject()
    {
        try
        {
            Project = await ProjectService.GetProjectAsync(ProjectId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading project: {ex.Message}", Severity.Error);
            MudDialog.Cancel();
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task SaveChanges()
    {
        try
        {
            await ProjectService.UpdateProjectAsync(Project, Project.Id);
            Snackbar.Add("Project Updated", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating project: {ex.Message}", Severity.Error);
        }
    }
}