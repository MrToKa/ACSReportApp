@using ACSReportApp.Services.Contracts
@using ACSReportApp.Services.Models
@using Microsoft.EntityFrameworkCore
@using MudBlazor

@inject IPartService PartService
@inject IPartAssemblyPartService PartAssemblyService
@inject ISnackbar Snackbar

<MudTable T="PartServiceModel" Items="@Elements" Dense="false" Hover="true" ReadOnly="false" CanCancelEdit="true" Filter="new Func<PartServiceModel,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Part Quantity updated!"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="true" EditTrigger="@editTrigger">
    <ColGroup>
        <col style="width:10%;" />
        <col style="width:10%;" />
        <col style="width:10%;" />
        <col style="width:40%;" />
        <col style="width:10%;" />
        <col style="width:10%;" />
        <col style="width:10%;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<PartServiceModel, object>(x=>x.PartType)">Part Type</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<PartServiceModel, object>(x=>x.Manufacturer)">Manufacturer</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<PartServiceModel, object>(x=>x.OrderNumber)">Order Number</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<PartServiceModel, object>(x=>x.Description)">Description</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<PartServiceModel, object>(x=>x.Quantity)">Quantity</MudTableSortLabel></MudTh>
        <MudTh>
            <MudText Typo="Typo.h6">Actions</MudText>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="PartType">@context.PartType</MudTd>
        <MudTd DataLabel="OrderNumber">@context.OrderNumber</MudTd>
        <MudTd DataLabel="Manufacturer">@context.Manufacturer</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
        <MudTd>
            <MudTooltip Text="Remove from Assembly">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" />
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="PartType">
            <MudTextField @bind-Value="context.PartType" Required ReadOnly="true" />
        </MudTd>
        <MudTd DataLabel="OrderNumber">
            <MudTextField @bind-Value="context.OrderNumber" Required ReadOnly="true" />
        </MudTd>
        <MudTd DataLabel="Manufacturer">
            <MudTextField @bind-Value="context.Manufacturer" Required ReadOnly="true" />
        </MudTd>
        <MudTd DataLabel="Description">
            <MudTextField @bind-Value="context.Description" Required ReadOnly="true" />
        </MudTd>
        <MudTd DataLabel="Quantity">
            <MudNumericField @bind-Value="context.Quantity" Required Min="1" />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public HashSet<PartServiceModel> AddedParts { get; set; }

    [Parameter]
    public Func<HashSet<PartServiceModel>, Task> OnPartsChanged { get; set; }

    [Parameter]
    public EventCallback<List<PartAssemblyPartModel>> OnAssemblyPartsChanged { get; set; }

    [Parameter]
    public List<PartAssemblyPartModel> PartsAssemblyList { get; set; }

    private List<string> editEvents = new();
    private string searchString = "";
    private PartServiceModel selectedItem1 = null;
    private PartServiceModel elementBeforeEdit;
    private HashSet<PartServiceModel> selectedItems1 = new HashSet<PartServiceModel>();
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private List<PartServiceModel> Elements = new List<PartServiceModel>();

    private HashSet<int> partsIdsToAdd = new HashSet<int>();

    protected override async Task OnInitializedAsync()
    {
        if (AddedParts == null)
        {
            Elements = new();
        }
        else
        {
            foreach (var partId in AddedParts)
            {
                var part = await PartService.GetPartAsync(partId.Id);

                var partForQuantity = PartsAssemblyList.Select(x => x.PartId).FirstOrDefault();

                if (partForQuantity == part.Id)
                {
                    part.Quantity = PartsAssemblyList.Where(x => x.PartId == part.Id).Select(x => x.Quantity).FirstOrDefault();
                }
                else
                {
                    part.Quantity = 1;
                }

                Elements.Add(part);
            }
        }
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {
                PartType = ((PartServiceModel)element).PartType,
                OrderNumber = ((PartServiceModel)element).OrderNumber,
                Manufacturer = ((PartServiceModel)element).Manufacturer,
                Description = ((PartServiceModel)element).Description,
                Quantity = ((PartServiceModel)element).Quantity
            };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((PartServiceModel)element).OrderNumber}");
    }

    private async void ItemHasBeenCommitted(object element)
    {
        int partId = ((PartServiceModel)element).Id;
        int quantity = ((PartServiceModel)element).Quantity;
        await UpdateAddedPartQuantity(partId, quantity);
        await NotifyParent();
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((PartServiceModel)element).PartType = elementBeforeEdit.PartType;
        ((PartServiceModel)element).Manufacturer = elementBeforeEdit.Manufacturer;
        ((PartServiceModel)element).Description = elementBeforeEdit.Description;
        ((PartServiceModel)element).OrderNumber = elementBeforeEdit.OrderNumber;
        ((PartServiceModel)element).Quantity = elementBeforeEdit.Quantity;
        AddEditionEvent($"RowEditCancel event: Editing of Element {((PartServiceModel)element).OrderNumber} canceled");
    }

    private bool FilterFunc(PartServiceModel element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.OrderNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PartType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Manufacturer.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Quantity.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected override async Task OnParametersSetAsync()
    {
        // Refresh the elements based on the updated AddedParts
        Elements.Clear();
        if (AddedParts != null)
        {
            foreach (var partId in AddedParts)
            {
                var part = await PartService.GetPartAsync(partId.Id);

                var assemblyPart = PartsAssemblyList.FirstOrDefault(x => x.PartId == part.Id);

                part.Quantity = assemblyPart != null ? assemblyPart.Quantity : 1;

                Elements.Add(part);
            }
        }

        StateHasChanged(); // Force re-render
    }

    private async Task AddPartToList(PartServiceModel part)
    {
        if (!AddedParts.Contains(part))
        {
            AddedParts.Add(part);

            var partForQuantity = PartsAssemblyList.Select(x => x.PartId).FirstOrDefault();

            if (partForQuantity == part.Id)
            {
                part.Quantity = PartsAssemblyList.Where(x => x.PartId == part.Id).Select(x => x.Quantity).FirstOrDefault();
            }
            else
            {
                part.Quantity = 1;
            }

            if (OnPartsChanged != null)
            {
                await OnPartsChanged(AddedParts); // Notify the parent component about the update
            }
        }
    }

    private async Task AddPartToAssembly(int partId, int quantity)
    {
        var assemblyPartModel = new PartAssemblyPartModel
            {
                PartId = partId,
                Quantity = quantity
            };

        PartsAssemblyList.Add(assemblyPartModel);
        await NotifyParent();
    }

    private async Task NotifyParent()
    {
        if (OnAssemblyPartsChanged.HasDelegate)
        {
            await OnAssemblyPartsChanged.InvokeAsync(PartsAssemblyList);
        }
    }

    private async Task UpdateAddedPartQuantity(int partId, int quantity)
    {
        var assemblyPart = PartsAssemblyList.FirstOrDefault(x => x.PartId == partId);
        if (assemblyPart != null)
        {
            assemblyPart.Quantity = quantity;
        }

        await NotifyParent();
    }
}